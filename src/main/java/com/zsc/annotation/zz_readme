注解
    1：Java注解数据类型
            注解是写在.java文件中，使用@interface作为关键字, 所以注解也是Java的一种数据类型，从广泛的定义来说，Class、Interface、Enum、Annotation都属于Class类型。
    2:元注解
        作用：基础注解，注解其他的注解;它们被用来提供对其它 annotation类型作说明
        meta_annotation
            1.@Target
            2.@Retention

            3.@Documented
                用于标记在生成javadoc时是否将注解包含进去，可以看到这个注解和@Override一样，注解中空空如也，什么东西都没有
            4.@Inherited
                允许子类继承父类中的注解，可以通过反射获取到父类的注解??

        @Target  Annotation修饰的对象范围
             用于定义注解可以在什么地方使用，默认可以在任何地方使用，也可以指定使用的范围，开发中将注解用在类上(如@Controller)、
                字段上(如@Autowire)、方法上(如@RequestMapping)、方法的参数上(如@RequestParam)等比较常见。

                ElementType.TYPE                : 类、接口或enum声明
                ElementType.FIELD               : 域(属性)声明
                ElementType.METHOD              : 方法声明      (常用)
                ElementType.PARAMETER           : 参数声明      (常用)
                ElementType.CONSTRUCTOR         : 构造方法声明
                ElementType.LOCAL_VARIABLE      :局部变量声明
                ElementType.ANNOTATION_TYPE     :注释类型声明
                ElementType.PACKAGE             : 包声明


        @Retention  Annotation 作用时间
            注解的声明周期，用于定义注解的存活阶段，可以存活在源码级别、编译级别(字节码级别)、运行时级别
                RetentionPolicy.SOURCE  ：源码级别，注解只存在源码中，一般用于和编译器交互，用于检测代码。如@Override, @SuppressWarings。
                RetentionPolicy.CLASS   ：字节码级别，注解存在于源码和字节码文件中，主要用于编译时生成额外的文件，如XML，Java文件等，但运行
                                         时无法获得。 如mybatis生成实体和映射文件，这个级别需要添加JVM加载时候的代理（javaagent），使用代理来动态修改字节码文件。
                RetentionPolicy.RUNTIME：运行时级别，注解存在于源码、字节码、java虚拟机中，主要用于运行时，可以使用反射获取相关的信息。


    2：关键子：@interface
