spring
    1：ioc 容器
        备注：向spring的ioc容器注入bean，di依赖注入。所有的组件放到容器中，组件之间的关系通过ioc自动装配
        1.1：xml方式注入bean

        1.2：注解开发
            1.2.0：@Configuration
                定义该类为配置类

            1.2.1：@bean
                向spring ioc容器中注入bean。第三方的bean也可以通过此方法注入

            1.2.2：@ComponentScan
                包扫描,只要@Controller @Service @Repository @Component 扫描，可以指定过滤规则TypeFilter

            1.2.3：@Scope
                作用范围
                    prototype
                        多实例。ioc会在使用的时候才会创建该对象，每次调用都会new
                    singleton
                        单实例（默认，ioc默认实例一个对象）。ioc容器启动绘调用config的创建bean的方法，
                        创建对象，放到ioc容器，以后每次获取直接从ioc中获取

            1.2.4：@Lazy
                使用bean的时候才会实例化对象

            1.2.5：@Conditional
                按照条件注入不同的bean
                放到方法或类上
                WindowsCondition,LinuxCondition

            1.2.6：@Import
                在配置类上使用
                id默认全类名

            1.2总结
                给组件中添加组件：
                    1：包扫描+组件标注注解 @Controller @Service @Component @Repository[只能是自己手写的组件],再使用ComponentScan扫描对应的包
                    2：@Bean[可以导入第三方包里面的组件]
                    3：@Import[快速给容器导入一个组件]



    2：period 生命周期
        2.1：singleton 单实例bean在ioc容器创建后就会创建对象，(lazy模式下会延迟加载)
             prototype 多实例bean不会被ioc管理，只会帮助创建，不会主动调用销毁，需要开发者手动调用
        2.2：初始化与销毁
            2.2.1：指定初始化与销毁，使用initMethod
            2.2.2：实现接口InitializingBean, DisposableBean
            2.2.3：JSR250使用注解 PostConstruct，PreDestroy
            2.2.4：BeanPostProcessor:bean的后置处理(不好用)
                在bean初始化前后处理一些工作
        2.3总结：
            1.默认情况下,spring在读取xml文件的时候（读取配置类）,就会创建对象。
            2.在创建的对象的时候(先调用构造器),会去调用init-method=".."属性值中所指定的方法。
            3.对象在被销毁的时候,会调用destroy-method="..."属性值中所指定的方法。(例如调用container.destroy()方法的时候)
            4.lazy-init="true",可以让这个对象在第一次被访问的时候创建。

    3：assemble 属性赋值
        3.1：@Value
        3.2：@PropertSource
        3.3：@Autowired @Qualiifier @Resource
        3.4：
        备注：配置文件中的值最后都会保存到environment环境变量
    4：AOP
    5：事务


